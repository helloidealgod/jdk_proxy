语句列表：stmts: (stmt)[1,n]| e
stmts->stmt stmt'
      |e
stmt'->stmt stmt'
      |e
语句：表达式、代码块、声明、声明并赋值、if语句、for语句、while语句
stmt->expr
      |block
      |TyNa
      |TyNa=E
      |TyNa(VdList)
      |TyNa(VdList)block
      |Na(EList)
      |Na=expr
      |for(expr;expr;expr) block
      |while(expr) block
      |do block while(expr);
      |if语句
if语句：if(expr) stmt [else stmt]
Ifs -> IfElse'
If -> if(expr) stmt
Else'-> else stmt
     |e

变量声明:类型+变量名 E -> T name
Vd ->TyNa
Na ->name [a-zA-Z]?[a-zA-Z0-9]
变量声明并赋值：类型+变量名=表达式;
Vd -> TyNa=E
函数声明:类型+函数名(变量声明1,变量声明2,...)
Fd -> TyNa(VdList)
函数声明并定义：类型+函数名(变量声明1,变量声明2,...)block
Fd' ->TyNa(VdList)block
block ->{stmts}

函数调用：函数名(表达式列表)
Func->Na(EList)
变量赋值：类型+变量名=表达式;
Vd -> Na=E

变量声明列表 VdList -> 变量声明[,变量声明] | e
VdList ->VdfVdt'
        |e
Vdt'   ->,Vdf
        |e
Vdf    ->VdVdt'

类型：基层类型、结构体、指针、数组 T -> int | struct name {} | T*
Ty ->void
     |int
     |short
     |float
     |long
     |char
     |string
     |T'复合类型

表达式列表：expr_list -> expr[,expr] | e
EList->EfEt'
      |e
Et'-> ,Ef
      |e
Ef -> EEt'

expr最终为一个值
========================================expr start===========================
逻辑运算 逻辑表达式 Logical expression: E -> E&&E | !E | E' 关系表达式
E -> FT'
T'-> &&FT'
    |||FT'
    |!FT'
    |e
F ->(E)
    |E' 关系表达式

不等式 关系表达式 Comparison Expression: E -> E<E | E!=E | E' 算式表达式
E  -> FT'
T' -> <FT'
    |<=FT'
    |>FT'
    |>=FT'
    |==FT'
    |!=FT'
    |e
F  -> (E)
    |E' 算式表达式

加减乘除 算式表达式 Formula expression: E -> E+E | E*E | -E | id
E  -> -E
E  -> TE'
E' -> +TE'
    |-TE'
    |e
T  -> FT'
T' -> *FT'
    |/FT'
    |%FT'
    |e
F  -> (E)
    |id

id -> 直接数 数值、字符、字符串
    |变量
    |函数调用返回值
========================================expr end===========================
赋值表达式: 赋值 声明且赋值
运算表达式：+-*/%
位运算:  & | ~  <<  >>
比较类运算表达式： == != < <= > >=
逻辑运算  || && !
.
->
变量声明
函数声明、函数定义
结构声明
指针、数组