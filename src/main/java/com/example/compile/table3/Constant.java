package com.example.compile.table3;

public class Constant {
    public static int[][] stateMap = {{-3, 4, 1, 3, -2, 16, 18, 2, 0, 0, 12, 6, 0, 9, -2, 14, 3, 0, 0, 26, 24, 30, 0, 0, 3, 0, -2, 0, -2, 3, -2, 3, 0, 21, 0, 0},
            {1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
            {2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
            {-1, -2, -2, -2, -2, -1, -1, -2, -1, -1, -1, -1, -1, -1, 3, -1, 3, -1, -1, -1, -1, -1, -1, -2, 3, -1, -2, -1, -2, 3, -2, 3, -1, -1, -1, -2},
            {-1, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, 5, -2, -2, -2, -1, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2},
            {-1, -2, -2, -2, -2, -2, -2, -1, -1, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -1, -2, -1, -2, -2, -2, -2},
            {-1, -2, -1, -2, -2, -2, -2, -1, -1, -1, -2, 7, -2, -2, -2, -2, -1, -2, -2, -2, 8, -2, -2, -2, -1, -2, -2, -2, -2, -1, -2, -1, -2, -2, -2, -2},
            {-1, -2, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -1, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2},
            {-1, -2, -1, -2, -2, -2, -2, -1, -1, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -1, -2, -1, -2, -2, -2, -2},
            {-1, -2, -2, -2, -2, -2, -2, -1, -1, -2, -2, -2, -2, 10, -2, -2, -1, -2, -2, -2, 11, 34, -2, -2, -1, -2, -2, -2, -2, -1, -2, -1, -2, -2, -2, -2},
            {-1, -2, -2, -2, -2, -2, -2, -2, -1, -1, -2, -2, -1, -2, -2, -2, -1, -2, -1, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -1, -2, -1, -2, -2, -2, -2},
            {-1, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -1, -2, -1, -2, -2, -2, -2},
            {-1, -2, -2, -2, -2, -2, -2, -2, -1, -1, -1, -2, -1, -2, -2, -2, -1, -2, -2, -2, 13, -2, -2, -2, -1, -2, -2, -2, -2, -1, -2, -1, -2, -2, -2, -2},
            {-1, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -1, -2, -1, -2, -2, -2, -2},
            {-1, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, 15, -2, -2, -2, -1, -2, -2, -2, -2, -1, -2, -1, -2, -2, -2, -2},
            {-1, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -1, -2, -1, -2, -2, -2, -2},
            {-1, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -1, -2, -2, -1, -2, -2, -2, 17, -2, -2, -2, -1, -2, -2, -2, -2, -1, -2, -1, -2, -2, -2, -2},
            {-1, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -1, -2, -2, -1, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -1, -2, -1, -2, -2, -2, -2},
            {-1, -2, -2, -2, -2, -2, 19, -2, -1, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, 20, -2, -2, -2, -1, -2, -2, -2, -2, -1, -2, -1, -2, -2, -2, -2},
            {-1, -1, -1, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -1, -2, -2, -1, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -1, -2, -1, -2, -2, -2, -2},
            {-1, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -1, -2, -1, -2, -2, -2, -2},
            {-1, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -1, -2, -2, -1, -2, -2, -2, 23, -2, -2, -2, -1, -2, -2, -2, -2, -1, -2, -1, -2, 22, -2, -2},
            {-1, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -1, -2, -2, -1, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -1, -2, -1, -2, -2, -2, -2},
            {-1, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -1, -2, -2, -1, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -1, -2, -1, -2, -2, -2, -2},
            {-1, -2, -1, -2, -2, -2, -2, -1, -1, -2, -2, -2, -2, -1, -2, -2, -1, -2, -2, -2, 25, -2, -2, -2, -1, -2, -2, -2, -2, -1, -2, -1, -1, -2, -2, -2},
            {-1, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -1, -2, -2, -1, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -1, -2, -1, -2, -2, -2, -2},
            {-1, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, 27, 28, -2, -2, -2, -1, -2, -2, -2, -2, -1, -2, -1, -2, -2, -2, -2},
            {-1, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, 29, -2, -2, -2, -1, -2, -2, -2, -2, -1, -2, -1, -2, -2, -2, -2},
            {-1, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -1, -2, -1, -2, -2, -2, -2},
            {-1, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -1, -2, -1, -2, -2, -2, -2},
            {-1, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, 32, 31, -2, -2, -1, -2, -2, -2, -2, -1, -2, -1, -2, -2, -2, -2},
            {-1, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -1, -2, -1, -2, -2, -2, -2},
            {-1, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -1, -2, -1, -2, -2, -2, -2},
            {-1, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -1, -2, -1, -2, -2, -2, -2},
            {-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -1, -2, -1, -2, -2, -2, -2}};
    //表达式集
    public static String[] exprs = {
            "Stmts",
            "Stmt'",
            "Stmt",
            "ForstList",
            "Forst'",
            "Forst",
            "ForetList",
            "Foret'",
            "Foret",
            "Block",
            "If",
            "Else'",
            "Nadef",
            "Tempdef'",
            "Funcall",
            "Temp'",
            "VdList",
            "Vdt'",
            "Vdf",
            "Vd",
            "EList",
            "Et'",
            "Ef",
            "E",
            "Le",
            "Lt'",
            "Lf",
            "Ce",
            "Ct'",
            "Cf",
            "Fe",
            "Fe'",
            "Ft",
            "Ft'",
            "F",
            "id",
            "Temp1",
            "Temp2",
            "Temp3"
    };
    //符号集
    public static String[] tokens = {"consv", "Na", "Typ", "for", "while", "do", "if", "else", "(", ")", "&&", "||", "!", "<", "<=", ">", ">=", "==", "!=", "+", "-", "*", "/", "%", ";", ",", "{", "}", "$"};
    //语法驱动表
    public static String[][] actionMap = {
/*Stmts*/       {"pop;push 0,Stmt,Stmt'", "pop;push 0,Stmt,Stmt'", "pop;push 0,Stmt,Stmt'", "pop;push 0,Stmt,Stmt'", "pop;push 0,Stmt,Stmt'", "pop;push 0,Stmt,Stmt'", "pop;push 0,Stmt,Stmt'", "error", "pop;push 0,Stmt,Stmt'", "error", "error", "error", "pop;push 0,Stmt,Stmt'", "error", "error", "error", "error", "error", "error", "error", "pop;push 0,Stmt,Stmt'", "error", "error", "error", "error", "error", "pop;push 0,Stmt,Stmt'", "pop;", "error"},
/*Stmt'*/       {"pop;push 0,Stmt,Stmt'", "pop;push 0,Stmt,Stmt'", "pop;push 0,Stmt,Stmt'", "pop;push 0,Stmt,Stmt'", "pop;push 0,Stmt,Stmt'", "pop;push 0,Stmt,Stmt'", "pop;push 0,Stmt,Stmt'", "pop;", "pop;push 0,Stmt,Stmt'", "pop;", "pop;", "pop;", "pop;push 0,Stmt,Stmt'", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;push 0,Stmt,Stmt'", "pop;", "pop;", "pop;", "pop", "pop;", "pop;push 0,Stmt,Stmt'", "pop", "pop"},
/*Stmt*/        {"pop;push 0,E;", "pop;push 0,Funcall;", "pop;push 0,Typ,{aTyp},Nadef,{aSeg};", "pop;push 0,for,(,ForstList,semi,E,semi,ForetList,),Block;", "pop;push 0,while,(,E,),Block;", "pop;push 0,do,Block,while,(,E,),semi;", "pop;push 0,If,Else';", "error", "pop;push 0,E;", "error", "error", "error", "pop;push 0,E;", "error", "error", "error", "error", "error", "error", "error", "pop;push 0,E;", "error", "error", "error", "error", "error", "pop;push 0,Block;", "pop;", "error"},
/*ForstList*/   {"pop;", "pop;push 0,Forst,Forst'", "pop;push 0,Forst,Forst'", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;"},
/*Forst'*/      {"pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;push 0,comma,Forst,Forst'", "pop;", "pop;", "pop;"},
/*Forst*/       {"error", "pop;push 0,Na,{aNa},=,E", "pop;push 2,eq,Na,{aNa},=,Typ,Na,{aNa},=,E;push 2,eq,Na,{aNa},semi,Typ,Na,{aNa};push 2,eq,Na,{aNa},comma,Typ,Na,{aNa}", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error"},
/*ForetList*/   {"pop;", "pop;push 0,Foret,Foret'", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;"},
/*Foret'*/      {"pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;push 0,comma,Foret,Foret'", "pop;", "pop;", "pop;"},
/*Foret*/       {"error", "pop;push 1,eq,=,Na,{aNa},=,E;push 1,eq,(,Na,{aNa},(,EList,)", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error"},
/*Block*/       {"error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "pop;push 0,{,Stmts,}", "error", "error"},
/*If*/          {"error", "error", "error", "error", "error", "error", "pop;push 0,if,(,E,),Stmt", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error"},
/*Else'*/       {"pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;push 0,else,Stmt", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;"},
/*Nadef*/       {"error", "pop;push 1,eq,=,Na,{aNa},=,E,{aE},semi;push 1,ne,=,Na,{aNa},Tempdef',semi", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error"},
/*Tempdef'*/    {"pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;pop;push 0,(,VdList,),Stmt;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;"},
/*Funcall*/     {"error", "pop;push 1,eq,=,Na,{aNa1},=,E,{aE},semi;push 1,ne,=,Na,{aNa1},Temp',semi", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error"},
/*Temp'*/       {"error", "error", "error", "error", "error", "error", "error", "error", "pop;pop;push 0,(,EList,),semi;", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "pop;", "error", "error", "error", "error"},
/*VdList*/      {"pop;", "pop;", "pop;push 0,Vdf,Vdt'", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;"},
/*Vdt'*/        {"pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;push 0,comma,Vdf", "pop;", "pop;", "pop;"},
/*Vdf*/         {"error", "error", "pop;push 0,Vd,Vdt'", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error"},
/*Vd*/          {"error", "error", "pop;push 0,Typ,Na,{aNa}", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error"},
/*EList*/       {"pop;push 0,Ef,Et'", "pop;push 0,Ef,Et'", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;push 0,Ef,Et'", "pop;", "pop;", "pop;", "pop;push 0,Ef,Et'", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;push 0,Ef,Et'", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;"},
/*Et'*/         {"pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;push 0,comma,Ef", "pop;", "pop;", "pop;"},
/*Ef*/          {"pop;push 0,{aOpm},E,{aE1},Et'", "pop;push 0,{aOpm},E,{aE1},Et'", "error", "error", "error", "error", "error", "error", "pop;push 0,{aOpm},E,{aE1},Et'", "error", "error", "error", "pop;push 0,{aOpm},E,{aE1},Et'", "error", "error", "error", "error", "error", "error", "error", "pop;push 0,{aOpm},E,{aE1},Et'", "error", "error", "error", "error", "error", "error", "error", "error"},
/*E*/           {"pop;push 0,Le", "pop;push 0,Le", "error", "error", "error", "error", "error", "error", "pop;push 0,Le", "error", "error", "error", "pop;push 0,Le", "error", "error", "error", "error", "error", "error", "error", "pop;push 0,Le", "error", "error", "error", "error", "error", "error", "error", "error"},
/*Le*/          {"pop;push 0,Lf,Lt'", "pop;push 0,Lf,Lt'", "error", "error", "error", "error", "error", "error", "pop;push 0,Lf,Lt'", "error", "error", "error", "pop;push 0,!,Le", "error", "error", "error", "error", "error", "error", "error", "pop;push 0,Lf,Lt'", "error", "error", "error", "error", "error", "error", "error", "error"},
/*Lt'*/         {"pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;push 0,&&,Lf,Lt'", "pop;push 0,||,Lf,Lt'", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;"},
/*Lf*/          {"pop;push 0,Ce", "pop;push 0,Ce", "error", "error", "error", "error", "error", "error", "pop;push 0,(,Le,),Temp1", "error", "error", "error", "pop;push 0,!,Lf", "error", "error", "error", "error", "error", "error", "error", "pop;push 0,Ce", "error", "error", "error", "error", "error", "error", "error", "error"},
/*Ce*/          {"pop;push 0,Cf,Ct'", "pop;push 0,Cf,Ct'", "error", "error", "error", "error", "error", "error", "pop;push 0,Cf,Ct'", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "pop;push 0,Cf,Ct'", "error", "error", "error", "error", "error", "error", "error", "error"},
/*Ct'*/         {"pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;push 0,<,Cf,Ct'", "pop;push 0,<=,Cf,Ct'", "pop;push 0,>,Cf,Ct'", "pop;push 0,>=,Cf,Ct'", "pop;push 0,==,Cf,Ct'", "pop;push 0,!=,Cf,Ct'", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;"},
/*Cf*/          {"pop;push 0,Fe", "pop;push 0,Fe", "error", "error", "error", "error", "error", "error", "pop;push 0,(,Ce,),Temp2", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "pop;push 0,Fe", "error", "error", "error", "error", "error", "error", "error", "error"},
/*Fe*/          {"pop;push 0,Ft,Fe'", "pop;push 0,Ft,Fe'", "error", "error", "error", "error", "error", "error", "pop;push 0,Ft,Fe'", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "pop;push 0,-,Fe", "error", "error", "error", "error", "error", "error", "error", "error"},
/*Fe'*/         {"pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;push 0,+,Ft,Fe'", "pop;push 0,-,Ft,Fe'", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;"},
/*Ft*/          {"pop;push 0,F,Ft'", "pop;push 0,F,Ft'", "error", "error", "error", "error", "error", "error", "pop;push 0,(,Fe,),Temp3", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error"},
/*Ft'*/         {"pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;push 0,*,F,Ft'", "pop;push 0,/,F,Ft'", "pop;push 0,%,F,Ft'", "pop;", "pop;", "pop;", "pop;", "pop;"},
/*F*/           {"pop;push 0,id", "pop;push 0,id", "error", "error", "error", "error", "error", "error", "pop;push 0,(,Fe,),Temp3", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error"},
/*id*/          {"pop;push 0,consv,{aConsv}", "pop;push 1,eq,(,Na,{aFna},(,{aF(},EList,),{aF)},{aFcall};push 1,ne,(,Na,{aNa2}", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error", "error"},
/*Temp1*/       {"pop;push 0,Temp2", "pop;push 0,Temp2", "pop;push 0,Temp2", "pop;push 0,Temp2", "pop;push 0,Temp2", "pop;push 0,Temp2", "pop;push 0,Temp2", "pop;push 0,Temp2", "pop;push 0,Temp2", "pop;push 0,Temp2", "pop;push 0,&&,Lf,Lt'", "pop;push 0,||,Lf,Lt'", "pop;push 0,!,Le", "pop;push 0,Temp2", "pop;push 0,Temp2", "pop;push 0,Temp2", "pop;push 0,Temp2", "pop;push 0,Temp2", "pop;push 0,Temp2", "pop;push 0,Temp2", "pop;push 0,Temp2", "pop;push 0,Temp2", "pop;push 0,Temp2", "pop;push 0,Temp2", "pop;push 0,Temp2", "pop;push 0,Temp2", "pop;push 0,Temp2", "pop;push 0,Temp2", "error"},
/*Temp2*/       {"pop;push 0,Temp3", "pop;push 0,Temp3", "pop;push 0,Temp3", "pop;push 0,Temp3", "pop;push 0,Temp3", "pop;push 0,Temp3", "pop;push 0,Temp3", "pop;push 0,Temp3", "pop;push 0,Temp3", "pop;push 0,Temp3", "pop;push 0,Temp3", "pop;push 0,Temp3", "pop;push 0,Temp3", "pop;push 0,<,Cf,Ct'", "pop;push 0,<=,Cf,Ct'", "pop;push 0,>,Cf,Ct'", "pop;push 0,>=,Cf,Ct'", "pop;push 0,==,Cf,Ct'", "pop;push 0,!=,Cf,Ct'", "pop;push 0,Temp3", "pop;push 0,Temp3", "pop;push 0,Temp3", "pop;push 0,Temp3", "pop;push 0,Temp3", "pop;push 0,Temp3", "pop;push 0,Temp3", "pop;push 0,Temp3", "pop;push 0,Temp3", "error"},
/*Temp3*/       {"pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;", "pop;push 0,!=,Cf,Ct'", "pop;push 0,+,Ft',Fe'", "pop;push 0,*,F,Ft'", "pop;push 0,/,F,Ft'", "pop;push 0,%,F,Ft'", "pop;", "pop;", "pop;", "pop;", "pop;"},
    };
}
